{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SACMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,UAAWF,SAASC,cAAc,oBAE9BE,EAAU,CACdC,MAAO,QACPC,aAAc,OACdC,SAAU,gBACVC,SAAU,OACVC,SAAU,QA2BZ,SAASC,EAAcH,EAAUI,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACLC,KAAKC,SAAW,GAGpCC,YAAW,W,OAAMJ,EAAQ,CAAEN,WAAUI,S,GAAUA,GAE/CM,YAAW,W,OAAMH,EAAO,CAAEP,WAAUI,S,GAAUA,E,IA/BpDZ,EAAKC,KAAKkB,iBAAiB,UAE3B,SAAqBC,GACnBA,EAAMC,iBACNrB,EAAKI,UAAUkB,UAAW,EAK1B,IAJA,IAAMC,EAAaC,OAAOxB,EAAKC,KAAKW,MAAMa,OACpCC,EAAYF,OAAOxB,EAAKC,KAAK0B,KAAKF,OAClCG,EAASJ,OAAOxB,EAAKC,KAAK2B,OAAOH,OAE9BI,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAG/BlB,EAFiBkB,EAAI,EACPN,EAAaG,EAAYG,GAEpCC,MAAK,SAAAC,G,IAAGvB,EAAQuB,EAARvB,SAAUI,EAAKmB,EAALnB,MACjBd,EAAAkC,OAAOC,QAAQ,sBAAqCC,OAAf1B,EAAS,QAAY0B,OAANtB,EAAM,MAAKP,E,IAEhE8B,OAAM,SAAAJ,G,IAAGvB,EAAQuB,EAARvB,SAAUI,EAAKmB,EAALnB,MAClBd,EAAAkC,OAAOI,QAAQ,qBAAoCF,OAAf1B,EAAS,QAAY0B,OAANtB,EAAM,MAAKP,E,IAGpEL,EAAKI,UAAUkB,UAAW,EAC1BtB,EAAKC,KAAKoC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst refs = {\n  form: document.querySelector('.form'),\n  createBtn: document.querySelector('[type=\"submit\"]'),\n};\nconst options = {\n  width: '500px',\n  borderRadius: '30px',\n  position: 'center-bottom',\n  distance: '25px',\n  fontSize: '30px',\n};\n\nrefs.form.addEventListener('submit', onCreateBtn);\n\nfunction onCreateBtn(event) {\n  event.preventDefault();\n  refs.createBtn.disabled = true;\n  const firstDelay = Number(refs.form.delay.value);\n  const delayStep = Number(refs.form.step.value);\n  const amount = Number(refs.form.amount.value);\n\n  for (let i = 0; i < amount; i++) {\n    const position = i + 1;\n    const delay = firstDelay + delayStep * i;\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(` Fulfilled promise ${position} in ${delay}ms`, options);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(` Rejected promise ${position} in ${delay}ms`, options);\n      });\n  }\n  refs.createBtn.disabled = false;\n  refs.form.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    if (shouldResolve) {\n      setTimeout(() => resolve({ position, delay }), delay);\n    } else {\n      setTimeout(() => reject({ position, delay }), delay);\n    }\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","createBtn","$ce04d3a99e08e73b$var$options","width","borderRadius","position","distance","fontSize","$ce04d3a99e08e73b$var$createPromise","delay","Promise","resolve","reject","Math","random","setTimeout","addEventListener","event","preventDefault","disabled","firstDelay","Number","value","delayStep","step","amount","i","then","param","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.486bc354.js.map"}